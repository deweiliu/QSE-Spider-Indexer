{"text": "\n\n![This is a good article. Follow the link for more\ninformation.](//upload.wikimedia.org/wikipedia/en/thumb/9/94/Symbol_support_vote.svg/19px-\nSymbol_support_vote.svg.png)\n\n# Python (programming language)\n\nFrom Wikipedia, the free encyclopedia\n\nJump to navigation Jump to search\n\nFor other uses, see Python.\n\nGeneral-purpose, high-level programming language\n\nPython![Python logo and\nwordmark.svg](//upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Python_logo_and_wordmark.svg/200px-\nPython_logo_and_wordmark.svg.png)  \n---  \nParadigm| Multi-paradigm: functional, imperative, object-oriented, reflective  \nDesigned by| Guido van Rossum  \nDeveloper| Python Software Foundation  \nFirst appeared| 1990; 29 years ago (1990)[1]  \nStable release|\n\n3.8.1 / 18 December 2019; 5 days ago (2019-12-18)[2]  \n2.7.17 / 19 October 2019; 2 months ago (2019-10-19)[3]  \n  \nTyping discipline| Duck, dynamic, gradual (since 3.5)[4]  \nLicense| Python Software Foundation License  \nFilename extensions| .py, .pyi, .pyc, .pyd, .pyo (prior to 3.5),[5] .pyw, .pyz\n(since 3.5)[6]  \nWebsite| www.python.org  \nMajor implementations  \nCPython, PyPy, Stackless Python, MicroPython, CircuitPython, IronPython,\nJython, RustPython  \nDialects  \nCython, RPython, Starlark[7]  \nInfluenced by  \nABC,[8] ALGOL 68,[9] APL,[10] C,[11] C++,[12] CLU,[13] Dylan,[14] Haskell,[15]\nIcon,[16] Java,[17] Lisp,[18] Modula-3,[12] Perl, Standard ML[10]  \nInfluenced  \nApache Groovy, Boo, Cobra, CoffeeScript,[19] D, F#, Genie,[20] Go,\nJavaScript,[21][22] Julia,[23] Nim, Ring,[24] Ruby,[25] Swift[26]  \n  \n  * ![](//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/16px-Wikibooks-logo-en-noslogan.svg.png) Python Programming at Wikibooks\n\n  \n  \n**Python** is an interpreted, high-level, general-purpose programming\nlanguage. Created by Guido van Rossum and first released in 1991, Python's\ndesign philosophy emphasizes code readability with its notable use of\nsignificant whitespace. Its language constructs and object-oriented approach\naim to help programmers write clear, logical code for small and large-scale\nprojects.[27]\n\nPython is dynamically typed and garbage-collected. It supports multiple\nprogramming paradigms, including procedural, object-oriented, and functional\nprogramming. Python is often described as a \"batteries included\" language due\nto its comprehensive standard library.[28]\n\nPython was conceived in the late 1980s as a successor to the ABC language.\nPython 2.0, released in 2000, introduced features like list comprehensions and\na garbage collection system capable of collecting reference cycles. Python\n3.0, released in 2008, was a major revision of the language that is not\ncompletely backward-compatible, and much Python 2 code does not run unmodified\non Python 3.\n\nThe Python 2 language, i.e. Python 2.7.x, is officially being discontinued on\nJanuary 1, 2020 (first planned for 2015) after which security patches and\nother improvements will not be released for it.[29][30] With Python 2's end-\nof-life, only Python 3.5.x[31] and later will be supported.\n\nPython interpreters are available for many operating systems. A global\ncommunity of programmers develops and maintains CPython, an open source[32]\nreference implementation. A non-profit organization, the Python Software\nFoundation, manages and directs resources for Python and CPython development.\n\n## Contents\n\n  * 1 History\n  * 2 Features and philosophy\n  * 3 Syntax and semantics\n    * 3.1 Indentation\n    * 3.2 Statements and control flow\n    * 3.3 Expressions\n    * 3.4 Methods\n    * 3.5 Typing\n    * 3.6 Mathematics\n  * 4 Python programming examples\n  * 5 Libraries\n  * 6 Development environments\n  * 7 Implementations\n    * 7.1 Reference implementation\n    * 7.2 Other implementations\n    * 7.3 Unsupported implementations\n    * 7.4 Cross-compilers to other languages\n    * 7.5 Performance\n  * 8 Development\n  * 9 Naming\n  * 10 API documentation generators\n  * 11 Uses\n  * 12 Languages influenced by Python\n  * 13 See also\n  * 14 References\n    * 14.1 Sources\n  * 15 Further reading\n  * 16 External links\n\n## History[edit]\n\n![](//upload.wikimedia.org/wikipedia/commons/thumb/9/94/Guido_van_Rossum_OSCON_2006_cropped.png/150px-\nGuido_van_Rossum_OSCON_2006_cropped.png)\n\nGuido van Rossum at OSCON 2006\n\nMain article: History of Python\n\nPython was conceived in the late 1980s[33] by Guido van Rossum at Centrum\nWiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC\nlanguage (itself inspired by SETL),[34] capable of exception handling and\ninterfacing with the Amoeba operating system.[8] Its implementation began in\nDecember 1989.[35] Van Rossum shouldered sole responsibility for the project,\nas the lead developer, until July 12, 2018, when he announced his \"permanent\nvacation\" from his responsibilities as Python's _Benevolent Dictator For Life_\n, a title the Python community bestowed upon him to reflect his long-term\ncommitment as the project's chief decision-maker.[36] He now shares his\nleadership as a member of a five-person steering council.[37][38][39] In\nJanuary, 2019, active Python core developers elected Brett Cannon, Nick\nCoghlan, Barry Warsaw, Carol Willing and Van Rossum to a five-member \"Steering\nCouncil\" to lead the project.[40]\n\nPython 2.0 was released on 16 October 2000 with many major new features,\nincluding a cycle-detecting garbage collector and support for Unicode.[41]\n\nPython 3.0 was released on 3 December 2008. It was a major revision of the\nlanguage that is not completely backward-compatible.[42] Many of its major\nfeatures were backported to Python 2.6.x[43] and 2.7.x version series.\nReleases of Python 3 include the `2to3` utility, which automates (at least\npartially) the translation of Python 2 code to Python 3.[44]\n\nPython 2.7's end-of-life date was initially set at 2015 then postponed to 2020\nout of concern that a large body of existing code could not easily be forward-\nported to Python 3.[45][46]\n\n## Features and philosophy[edit]\n\nPython is a multi-paradigm programming language. Object-oriented programming\nand structured programming are fully supported, and many of its features\nsupport functional programming and aspect-oriented programming (including by\nmetaprogramming[47] and metaobjects (magic methods)).[48] Many other paradigms\nare supported via extensions, including design by contract[49][50] and logic\nprogramming.[51]\n\nPython uses dynamic typing and a combination of reference counting and a\ncycle-detecting garbage collector for memory management. It also features\ndynamic name resolution (late binding), which binds method and variable names\nduring program execution.\n\nPython's design offers some support for functional programming in the Lisp\ntradition. It has `filter`, `map`, and `reduce` functions; list\ncomprehensions, dictionaries, sets, and generator expressions.[52] The\nstandard library has two modules (itertools and functools) that implement\nfunctional tools borrowed from Haskell and Standard ML.[53]\n\nThe language's core philosophy is summarized in the document _TheZen of\nPython_ ( _PEP 20_ ), which includes aphorisms such as:[54]\n\n  * Beautiful is better than ugly.\n  * Explicit is better than implicit.\n  * Simple is better than complex.\n  * Complex is better than complicated.\n  * Readability counts.\n\nRather than having all of its functionality built into its core, Python was\ndesigned to be highly extensible. This compact modularity has made it\nparticularly popular as a means of adding programmable interfaces to existing\napplications. Van Rossum's vision of a small core language with a large\nstandard library and easily extensible interpreter stemmed from his\nfrustrations with ABC, which espoused the opposite approach.[33]\n\nPython strives for a simpler, less-cluttered syntax and grammar while giving\ndevelopers a choice in their coding methodology. In contrast to Perl's \"there\nis more than one way to do it\" motto, Python embraces a \"there should be\none\u2014and preferably only one\u2014obvious way to do it\" design philosophy.[54] Alex\nMartelli, a Fellow at the Python Software Foundation and Python book author,\nwrites that \"To describe something as 'clever' is _not_ considered a\ncompliment in the Python culture.\"[55]\n\nPython's developers strive to avoid premature optimization, and reject patches\nto non-critical parts of the CPython reference implementation that would offer\nmarginal increases in speed at the cost of clarity.[56] When speed is\nimportant, a Python programmer can move time-critical functions to extension\nmodules written in languages such as C, or use PyPy, a just-in-time compiler.\nCython is also available, which translates a Python script into C and makes\ndirect C-level API calls into the Python interpreter.\n\nAn important goal of Python's developers is keeping it fun to use. This is\nreflected in the language's name\u2014a tribute to the British comedy group Monty\nPython[57]\u2014and in occasionally playful approaches to tutorials and reference\nmaterials, such as examples that refer to spam and eggs (from a famous Monty\nPython sketch) instead of the standard foo and bar.[58][59]\n\nA common neologism in the Python community is _pythonic_ , which can have a\nwide range of meanings related to program style. To say that code is pythonic\nis to say that it uses Python idioms well, that it is natural or shows fluency\nin the language, that it conforms with Python's minimalist philosophy and\nemphasis on readability. In contrast, code that is difficult to understand or\nreads like a rough transcription from another programming language is called\n_unpythonic_.\n\nUsers and admirers of Python, especially those considered knowledgeable or\nexperienced, are often referred to as _Pythonistas_.[60][61]\n\n## Syntax and semantics[edit]\n\nMain article: Python syntax and semantics\n\nPython is meant to be an easily readable language. Its formatting is visually\nuncluttered, and it often uses English keywords where other languages use\npunctuation. Unlike many other languages, it does not use curly brackets to\ndelimit blocks, and semicolons after statements are optional. It has fewer\nsyntactic exceptions and special cases than C or Pascal.[62]\n\n### Indentation[edit]\n\nMain article: Python syntax and semantics \u00a7 Indentation\n\nPython uses whitespace indentation, rather than curly brackets or keywords, to\ndelimit blocks. An increase in indentation comes after certain statements; a\ndecrease in indentation signifies the end of the current block.[63] Thus, the\nprogram's visual structure accurately represents the program's semantic\nstructure.[1] This feature is sometimes termed the off-side rule, which some\nother languages share, but in most languages indentation doesn't have any\nsemantic meaning.\n\n### Statements and control flow[edit]\n\nPython's statements include (among others):\n\n  * The assignment statement (token '=', the equals sign). This operates differently than in traditional imperative programming languages, and this fundamental mechanism (including the nature of Python's version of _variables_ ) illuminates many other features of the language. Assignment in C, e.g., `x = 2`, translates to \"typed variable name x receives a copy of numeric value 2\". The (right-hand) value is copied into an allocated storage location for which the (left-hand) variable name is the symbolic address. The memory allocated to the variable is large enough (potentially quite large) for the declared type. In the simplest case of Python assignment, using the same example, `x = 2`, translates to \"(generic) name x receives a reference to a separate, dynamically allocated object of numeric (int) type of value 2.\" This is termed _binding_ the name to the object. Since the name's storage location doesn't _contain_ the indicated value, it is improper to call it a _variable_. Names may be subsequently rebound at any time to objects of greatly varying types, including strings, procedures, complex objects with data and methods, etc. Successive assignments of a common value to multiple names, e.g., `x = 2`; `y = 2`; `z = 2` result in allocating storage to (at most) three names and one numeric object, to which all three names are bound. Since a name is a generic reference holder it is unreasonable to associate a fixed data type with it. However at a given time a name will be bound to _some_ object, which **will** have a type; thus there is dynamic typing.\n  * The `if` statement, which conditionally executes a block of code, along with `else` and `elif` (a contraction of else-if).\n  * The `for` statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.\n  * The `while` statement, which executes a block of code as long as its condition is true.\n  * The `try` statement, which allows exceptions raised in its attached code block to be caught and handled by `except` clauses; it also ensures that clean-up code in a `finally` block will always be run regardless of how the block exits.\n  * The `raise` statement, used to raise a specified exception or re-raise a caught exception.\n  * The `class` statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming.\n  * The `def` statement, which defines a function or method.\n  * The `with` statement, from Python 2.5 released on September 2006,[64] which encloses a code block within a context manager (for example, acquiring a lock before the block of code is run and releasing the lock afterwards, or opening a file and then closing it), allowing Resource Acquisition Is Initialization (RAII)-like behavior and replaces a common try/finally idiom.[65]\n  * The `break` statement, exits from the loop.\n  * The `continue` statement, skips this iteration and continues with the next item.\n  * The `pass` statement, which serves as a NOP. It is syntactically needed to create an empty code block.\n  * The `assert` statement, used during debugging to check for conditions that ought to apply.\n  * The `yield` statement, which returns a value from a generator function. From Python 2.5, `yield` is also an operator. This form is used to implement coroutines.\n  * The `import` statement, which is used to import modules whose functions or variables can be used in the current program. There are three ways of using import: `import <module name> [as <alias>]` or `from <module name> import *` or `from <module name> import <definition 1> [as <alias 1>], <definition 2> [as <alias 2>], ...`.\n  * The `print` statement was changed to the `print()` function in Python 3.[66]\n\nPython does not support tail call optimization or first-class continuations,\nand, according to Guido van Rossum, it never will.[67][68] However, better\nsupport for coroutine-like functionality is provided in 2.5, by extending\nPython's generators.[69] Before 2.5, generators were lazy iterators;\ninformation was passed unidirectionally out of the generator. From Python 2.5,\nit is possible to pass information back into a generator function, and from\nPython 3.3, the information can be passed through multiple stack levels.[70]\n\n### Expressions[edit]\n\nSome Python expressions are similar to languages such as C and Java, while\nsome are not:\n\n  * Addition, subtraction, and multiplication are the same, but the behavior of division differs. There are two types of divisions in Python. They are floor division (or integer division) `//` and floating point`/`division.[71] Python also added the `**` operator for exponentiation.\n  * From Python 3.5, the new `@` infix operator was introduced. It is intended to be used by libraries such as NumPy for matrix multiplication.[72][73]\n  * From Python 3.8, the syntax `:=`, called the 'walrus operator' was introduced. It assigns values to variables as part of a larger expression.[74]\n  * In Python, `==` compares by value, versus Java, which compares numerics by value[75] and objects by reference.[76] (Value comparisons in Java on objects can be performed with the `equals()` method.) Python's `is` operator may be used to compare object identities (comparison by reference). In Python, comparisons may be chained, for example `a <= b <= c`.\n  * Python uses the words `and`, `or`, `not` for its boolean operators rather than the symbolic `&&`, `||`, `!` used in Java and C.\n  * Python has a type of expression termed a _list comprehension_. Python 2.4 extended list comprehensions into a more general expression termed a _generator expression_.[52]\n  * Anonymous functions are implemented using lambda expressions; however, these are limited in that the body can only be one expression.\n  * Conditional expressions in Python are written as `x if c else y`[77] (different in order of operands from the `c ? x : y` operator common to many other languages).\n  * Python makes a distinction between lists and tuples. Lists are written as `[1, 2, 3]`, are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples are written as `(1, 2, 3)`, are immutable and thus can be used as the keys of dictionaries, provided all elements of the tuple are immutable. The `+` operator can be used to concatenate two tuples, which does not directly modify their contents, but rather produces a new tuple containing the elements of both provided tuples. Thus, given the variable `t` initially equal to `(1, 2, 3)`, executing `t = t + (4, 5)` first evaluates `t + (4, 5)`, which yields `(1, 2, 3, 4, 5)`, which is then assigned back to `t`, thereby effectively \"modifying the contents\" of `t`, while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts.[78]\n  * Python features _sequence unpacking_ wherein multiple expressions, each evaluating to anything that can be assigned to (a variable, a writable property, etc.), are associated in the identical manner to that forming tuple literals and, as a whole, are put on the left hand side of the equal sign in an assignment statement. The statement expects an _iterable_ object on the right hand side of the equal sign that produces the same number of values as the provided writable expressions when iterated through, and will iterate through it, assigning each of the produced values to the corresponding expression on the left.[79]\n  * Python has a \"string format\" operator `%`. This functions analogous to `printf` format strings in C, e.g. `\"spam=%s eggs=%d\" % (\"blah\", 2)` evaluates to `\"spam=blah eggs=2\"`. In Python 3 and 2.6+, this was supplemented by the `format()` method of the `str` class, e.g. `\"spam={0} eggs={1}\".format(\"blah\", 2)`. Python 3.6 added \"f-strings\": `blah = \"blah\"; eggs = 2; f'spam={blah} eggs={eggs}'`.[80]\n  * Python has various kinds of string literals: \n    * Strings delimited by single or double quote marks. Unlike in Unix shells, Perl and Perl-influenced languages, single quote marks and double quote marks function identically. Both kinds of string use the backslash (`\\`) as an escape character. String interpolation became available in Python 3.6 as \"formatted string literals\".[80]\n    * Triple-quoted strings, which begin and end with a series of three single or double quote marks. They may span multiple lines and function like here documents in shells, Perl and Ruby.\n    * Raw string varieties, denoted by prefixing the string literal with an `r`. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows-style paths. Compare \"`@`-quoting\" in C#.\n  * Python has array index and array slicing expressions on lists, denoted as `a[key]`, `a[start:stop]` or `a[start:stop:step]`. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the _start_ index up to, but not including, the _stop_ index. The third slice parameter, called _step_ or _stride_ , allows elements to be skipped and reversed. Slice indexes may be omitted, for example `a[:]` returns a copy of the entire list. Each element of a slice is a shallow copy.\n\nIn Python, a distinction between expressions and statements is rigidly\nenforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This\nleads to duplicating some functionality. For example:\n\n  * List comprehensions vs. `for`-loops\n  * Conditional expressions vs. `if` blocks\n  * The `eval()` vs. `exec()` built-in functions (in Python 2, `exec` is a statement); the former is for expressions, the latter is for statements.\n\nStatements cannot be a part of an expression, so list and other comprehensions\nor lambda expressions, all being expressions, cannot contain statements. A\nparticular case of this is that an assignment statement such as `a = 1` cannot\nform part of the conditional expression of a conditional statement. This has\nthe advantage of avoiding a classic C error of mistaking an assignment\noperator `=` for an equality operator `==` in conditions: `if (c = 1) { ... }`\nis syntactically valid (but probably unintended) C code but `if c = 1: ...`\ncauses a syntax error in Python.\n\n### Methods[edit]\n\nMethods on objects are functions attached to the object's class; the syntax\n`instance.method(argument)` is, for normal methods and functions, syntactic\nsugar for `Class.method(instance, argument)`. Python methods have an explicit\n`self` parameter to access instance data, in contrast to the implicit `self`\n(or `this`) in some other object-oriented programming languages (e.g., C++,\nJava, Objective-C, or Ruby).[81]\n\n### Typing[edit]\n\n![](//upload.wikimedia.org/wikipedia/commons/thumb/1/10/Python_3._The_standard_type_hierarchy.png/220px-\nPython_3._The_standard_type_hierarchy.png)\n\nThe standard type hierarchy in Python 3\n\nPython uses duck typing and has typed objects but untyped variable names. Type\nconstraints are not checked at compile time; rather, operations on an object\nmay fail, signifying that the given object is not of a suitable type. Despite\nbeing dynamically typed, Python is strongly typed, forbidding operations that\nare not well-defined (for example, adding a number to a string) rather than\nsilently attempting to make sense of them.\n\nPython allows programmers to define their own types using classes, which are\nmost often used for object-oriented programming. New instances of classes are\nconstructed by calling the class (for example, `SpamClass()` or\n`EggsClass()`), and the classes are instances of the metaclass `type` (itself\nan instance of itself), allowing metaprogramming and reflection.\n\nBefore version 3.0, Python had two kinds of classes: _old-style_ and _new-\nstyle_.[82] The syntax of both styles is the same, the difference being\nwhether the class `object` is inherited from, directly or indirectly (all new-\nstyle classes inherit from `object` and are instances of `type`). In versions\nof Python 2 from Python 2.2 onwards, both kinds of classes can be used. Old-\nstyle classes were eliminated in Python 3.0.\n\nThe long term plan is to support gradual typing[83] and from Python 3.5, the\nsyntax of the language allows specifying static types but they are not checked\nin the default implementation, CPython. An experimental optional static type\nchecker named _mypy_ supports compile-time type checking.[84]\n\nSummary of Python 3's built-in types  Type  | Mutability | Description  |\nSyntax example  \n---|---|---|---  \n`bool` | immutable  | Boolean value | `True`  \n`False`  \n`bytearray` | mutable  | Sequence of bytes | `bytearray(b'Some ASCII')`  \n`bytearray(b\"Some ASCII\")`  \n`bytearray([119, 105, 107, 105])`  \n`bytes` | immutable  | Sequence of bytes  | `b'Some ASCII'`  \n`b\"Some ASCII\"`  \n`bytes([119, 105, 107, 105])`  \n`complex` | immutable  | Complex number with real and imaginary parts  |\n`3+2.7j`  \n`dict` | mutable  | Associative array (or dictionary) of key and value pairs;\ncan contain mixed types (keys and values), keys must be a hashable type  |\n`{'key1': 1.0, 3: False}`  \n`ellipsis`a | immutable  | An ellipsis placeholder to be used as an index in\nNumPy arrays  | `...`  \n`Ellipsis`  \n`float` | immutable  | Floating point number, system-defined precision  |\n`3.1415927`  \n`frozenset` | immutable  | Unordered set, contains no duplicates; can contain\nmixed types, if hashable  | `frozenset([4.0, 'string', True])`  \n`int` | immutable  | Integer of unlimited magnitude[85] | `42`  \n`list` | mutable  | List, can contain mixed types  | `[4.0, 'string', True]`  \n`NoneType`a | immutable  | An object representing the absence of a value.  |\n`None`  \n`NotImplementedType`a | immutable  | A placeholder that can be returned from\noverloaded operators to indicate unsupported operand types.  |\n`NotImplemented`  \n`range` | immutable  | A Sequence of numbers commonly used for looping\nspecific number of times in `for` loops[86] | `range(1, 10)`  \n`range(10,-5,-2)`  \n`set` | mutable  | Unordered set, contains no duplicates; can contain mixed\ntypes, if hashable  | `{4.0, 'string', True}`  \n`str` | immutable  | A character string: sequence of Unicode codepoints  |\n`'Wikipedia'`  \n`\"Wikipedia\"`  \n`\"\"\"Spanning  \nmultiple  \nlines\"\"\"`  \n`tuple` | immutable  | Can contain mixed types  | `(4.0, 'string', True)`  \n  \n**^a** Not directly accessible by name\n\n### Mathematics[edit]\n\nPython has the usual symbols for arithmetic operators (`+`, `-`, `*`, `/`),\nand the remainder operator `%` (where the remainder can be negative, e.g.\n`4%-3 == -2`). It also has `**` for exponentiation, e.g. `5**3 == 125` and\n`9**0.5 == 3.0`, and a new matrix multiply `@` operator is included in version\n3.5.[87] I.e. all these operators work as in traditional math; with same\nprecedence rules, the operators infix (or `-` can additionally be unary).\nAdditionally, it has a unary operator (`~`), which essentially inverts all the\nbits of its one argument. For integers, this means `~x=-x-1`.[88] Other\noperators include bitwise shift operators `x << y`, which shifts `x` to the\nleft `y` places, the same as `x*(2**y) `, and `x >> y`, which shifts `x` to\nthe right `y` places, the same as `x//(2**y)`.[89]\n\nThe behavior of division has changed significantly over time so that division\nbetween integers produces accurate floating point results:[90]\n\n  * Python 2.1 and earlier use the C division behavior. The `/` operator is integer division if both operands are integers, and floating-point division otherwise. Integer division rounds towards 0, e.g. `7/3 == 2` and `-7/3 == -2`.\n  * Python 2.2 changes integer division to round towards negative infinity, e.g. `7/3 == 2` and `-7/3 == -3`. The floor division `//` operator is introduced. So `7//3 == 2`, `-7//3 == -3`, `7.5//3 == 2.0` and `-7.5//3 == -3.0`. Adding `from __future__ import division` causes a module to use Python 3.0 rules for division (see next).\n  * Python 3.0 changes `/` to always be floating-point division, e.g. `5/2 == 2.5`.\n\nIn Python terms, `/` before version 3.0 is _classic division_ , `/` in\nversions 3.0 and higher is _true division_ , and `//` is _floor division_.[90]\n\nRounding towards negative infinity, though different from most languages, adds\nconsistency. For instance, it means that the equation `(a + b)//b == a//b + 1`\nis always true. It also means that the equation `b*(a//b) + a%b == a` is valid\nfor both positive and negative values of `a`. However, maintaining the\nvalidity of this equation means that while the result of `a%b` is, as\nexpected, in the half-open interval [0, _b_ ), where `b` is a positive\ninteger, it has to lie in the interval ( _b_ , 0] when `b` is negative.[91]\n\nPython provides a `round` function for rounding a float to the nearest\ninteger. For tie-breaking, versions before 3 use round-away-from-zero:\n`round(0.5)` is 1.0, `round(-0.5)` is \u22121.0.[92] Python 3 uses round to even:\n`round(1.5)` is 2, `round(2.5)` is 2.[93]\n\nPython allows boolean expressions with multiple equality relations in a manner\nthat is consistent with general use in mathematics. For example, the\nexpression `a < b < c` tests whether `a` is less than `b` and `b` is less than\n`c`.[94] C-derived languages interpret this expression differently: in C, the\nexpression would first evaluate `a < b`, resulting in 0 or 1, and that result\nwould then be compared with `c`.[95]\n\nPython has extensive built-in support for arbitrary-precision arithmetic.\nIntegers are transparently switched from the machine-supported maximum fixed-\nprecision (usually 32 or 64 bits), belonging to the python type `int`, to\narbitrary precision, belonging to the Python type `long`, where needed. The\nlatter have an \"L\" suffix in their textual representation.[96] (In Python 3,\nthe distinction between the `int` and `long` types was eliminated; this\nbehavior is now entirely contained by the `int` class.) The `Decimal`\ntype/class in module `decimal` (since version 2.4) provides decimal floating\npoint numbers to arbitrary precision and several rounding modes.[97] The\n`Fraction` type in module `fractions` (since version 2.6) provides arbitrary\nprecision for rational numbers.[98]\n\nDue to Python's extensive mathematics library, and the third-party library\nNumPy that further extends the native capabilities, it is frequently used as a\nscientific scripting language to aid in problems such as numerical data\nprocessing and manipulation.[99][100]\n\n## Python programming examples[edit]\n\nHello world program:\n\n    \n    \n    print('Hello, world!')\n    \n\nProgram to calculate factorial of a positive integer:\n\n    \n    \n    n = int(input('Type a number, then its factorial will be printed: '))\n    \n    if n < 0:\n        raise ValueError('You must enter a positive number')\n    \n    fact = 1\n    i = 2\n    while i <= n:\n        fact = fact * i\n        i += 1\n    print(fact)\n    \n\n## Libraries[edit]\n\nPython's large standard library, commonly cited as one of its greatest\nstrengths,[101] provides tools suited to many tasks. For Internet-facing\napplications, many standard formats and protocols such as MIME and HTTP are\nsupported. It includes modules for creating graphical user interfaces,\nconnecting to relational databases, generating pseudorandom numbers,\narithmetic with arbitrary-precision decimals,[102] manipulating regular\nexpressions, and unit testing.\n\nSome parts of the standard library are covered by specifications (for example,\nthe Web Server Gateway Interface (WSGI) implementation `wsgiref` follows PEP\n333[103]), but most modules are not. They are specified by their code,\ninternal documentation, and test suites (if supplied). However, because most\nof the standard library is cross-platform Python code, only a few modules need\naltering or rewriting for variant implementations.\n\nAs of November 2019,[update] the Python Package Index (PyPI), the official\nrepository for third-party Python software, contains over 200,000[104]\npackages with a wide range of functionality, including:\n\n  * Graphical user interfaces\n  * Web frameworks\n  * Multimedia\n  * Databases\n  * Networking\n  * Test frameworks\n  * Automation\n  * Web scraping[105]\n  * Documentation\n  * System administration\n  * Scientific computing\n  * Text processing\n  * Image processing\n  * Machine learning\n  * Data analytics\n\n## Development environments[edit]\n\nSee also: Comparison of integrated development environments \u00a7 Python\n\nMost Python implementations (including CPython) include a read\u2013eval\u2013print loop\n(REPL), permitting them to function as a command line interpreter for which\nthe user enters statements sequentially and receives results immediately.\n\nOther shells, including IDLE and IPython, add further abilities such as auto-\ncompletion, session state retention and syntax highlighting.\n\nAs well as standard desktop integrated development environments, there are Web\nbrowser-based IDEs; SageMath (intended for developing science and math-related\nPython programs); PythonAnywhere, a browser-based IDE and hosting environment;\nand Canopy IDE, a commercial Python IDE emphasizing scientific computing.[106]\n\n## Implementations[edit]\n\nSee also: List of Python software \u00a7 Python implementations\n\n### Reference implementation[edit]\n\nCPython is the reference implementation of Python. It is written in C, meeting\nthe C89 standard with several select C99 features.[107] It compiles Python\nprograms into an intermediate bytecode[108] which is then executed by its\nvirtual machine.[109] CPython is distributed with a large standard library\nwritten in a mixture of C and native Python. It is available for many\nplatforms, including Windows and most modern Unix-like systems. Platform\nportability was one of its earliest priorities.[110]\n\n### Other implementations[edit]\n\nPyPy is a fast, compliant interpreter of Python 2.7 and 3.5.[111] Its just-in-\ntime compiler brings a significant speed improvement over CPython but several\nlibraries written in C cannot be used with it.[112][113]\n\nStackless Python is a significant fork of CPython that implements\nmicrothreads; it does not use the C memory stack, thus allowing massively\nconcurrent programs. PyPy also has a stackless version.[114]\n\nMicroPython and CircuitPython are Python 3 variants optimized for\nmicrocontrollers. This includes Lego Mindstorms EV3.[115]\n\nRustPython is a Python 3 interpreter written in Rust.[116]\n\n### Unsupported implementations[edit]\n\nOther just-in-time Python compilers have been developed, but are now\nunsupported:\n\n  * Google began a project named Unladen Swallow in 2009, with the aim of speeding up the Python interpreter five-fold by using the LLVM, and of improving its multithreading ability to scale to thousands of cores[117], while ordinary implementations suffer from the global interpreter lock.\n  * Psyco is a just-in-time specialising compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain data types and is faster than standard Python code.\n\nIn 2005, Nokia released a Python interpreter for the Series 60 mobile phones\nnamed PyS60. It includes many of the modules from the CPython implementations\nand some additional modules to integrate with the Symbian operating system.\nThe project has been kept up-to-date to run on all variants of the S60\nplatform, and several third-party modules are available. The Nokia N900 also\nsupports Python with GTK widget libraries, enabling programs to be written and\nrun on the target device.[118]\n\n### Cross-compilers to other languages[edit]\n\nThere are several compilers to high-level object languages, with either\nunrestricted Python, a restricted subset of Python, or a language similar to\nPython as the source language:\n\n  * Jython compiles into Java byte code, which can then be executed by every Java virtual machine implementation. This also enables the use of Java class library functions from the Python program.\n  * IronPython follows a similar approach in order to run Python programs on the .NET Common Language Runtime.\n  * The RPython language can be compiled to C, Java bytecode, or Common Intermediate Language, and is used to build the PyPy interpreter of Python.\n  * Pyjs compiles Python to JavaScript.\n  * Cython compiles Python to C and C++.\n  * Numba uses LLVM to compile Python to machine code.\n  * Pythran compiles Python to C++.\n  * Somewhat dated Pyrex (latest release in 2010) and Shed Skin (latest release in 2013) compile to C and C++ respectively.\n  * Google's Grumpy compiles Python to Go.\n  * MyHDL compiles Python to VHDL.\n  * Nuitka compiles Python into C++.[119]\n\n### Performance[edit]\n\nA performance comparison of various Python implementations on a non-numerical\n(combinatorial) workload was presented at EuroSciPy '13.[120]\n\n## Development[edit]\n\nPython's development is conducted largely through the _Python Enhancement\nProposal_ (PEP) process, the primary mechanism for proposing major new\nfeatures, collecting community input on issues and documenting Python design\ndecisions.[121] Python coding style is covered in PEP 8.[122] Outstanding PEPs\nare reviewed and commented on by the Python community and the steering\ncouncil.[121]\n\nEnhancement of the language corresponds with development of the CPython\nreference implementation. The mailing list python-dev is the primary forum for\nthe language's development. Specific issues are discussed in the Roundup bug\ntracker maintained at python.org.[123] Development originally took place on a\nself-hosted source-code repository running Mercurial, until Python moved to\nGitHub in January 2017.[124]\n\nCPython's public releases come in three types, distinguished by which part of\nthe version number is incremented:\n\n  * Backward-incompatible versions, where code is expected to break and need to be manually ported. The first part of the version number is incremented. These releases happen infrequently\u2014for example, version 3.0 was released 8 years after 2.0.\n  * Major or \"feature\" releases, about every 18 months, are largely compatible but introduce new features. The second part of the version number is incremented. Each major version is supported by bugfixes for several years after its release.[125]\n  * Bugfix releases, which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented.[126]\n\nPython 3.9 alpha1 was announced in November 2019,[127] but the release date\nfor the final version depends on what new proposal for release dates are\nadopted with three draft proposals under discussion, and a yearly cadence is\none option.[128][129][130][131]\n\nMany alpha, beta, and release-candidates are also released as previews and for\ntesting before final releases. Although there is a rough schedule for each\nrelease, they are often delayed if the code is not ready. Python's development\nteam monitors the state of the code by running the large unit test suite\nduring development, and using the BuildBot continuous integration system.[132]\n\nThe community of Python developers has also contributed over 206,000[133]\nsoftware modules (as of 29 November 2019[update]) to the Python Package Index\n(PyPI), the official repository of third-party Python libraries.\n\nThe major academic conference on Python is PyCon. There are also special\nPython mentoring programmes, such as Pyladies.\n\n## Naming[edit]\n\nPython's name is derived from the British comedy group Monty Python, whom\nPython creator Guido van Rossum enjoyed while developing the language. Monty\nPython references appear frequently in Python code and culture;[134] for\nexample, the metasyntactic variables often used in Python literature are\n_spam_ and _eggs_ instead of the traditional _foo_ and _bar_.[134][135] The\nofficial Python documentation also contains various references to Monty Python\nroutines.[136][137]\n\nThe prefix _Py-_ is used to show that something is related to Python. Examples\nof the use of this prefix in names of Python applications or libraries include\nPygame, a binding of SDL to Python (commonly used to create games); PyQt and\nPyGTK, which bind Qt and GTK to Python respectively; and PyPy, a Python\nimplementation originally written in Python.\n\n## API documentation generators[edit]\n\nPython API documentation generators include:\n\n  * Sphinx\n  * Epydoc\n  * HeaderDoc\n  * pydoc\n\n## Uses[edit]\n\nMain article: List of Python software\n\nSince 2003, Python has consistently ranked in the top ten most popular\nprogramming languages in the TIOBE Programming Community Index where, as of\nDecember 2018[update], it is the third most popular language (behind Java, and\nC).[138] It was selected Programming Language of the Year in 2007, 2010, and\n2018.[139]\n\nAn empirical study found that scripting languages, such as Python, are more\nproductive than conventional languages, such as C and Java, for programming\nproblems involving string manipulation and search in a dictionary, and\ndetermined that memory consumption was often \"better than Java and not much\nworse than C or C++\".[140]\n\nLarge organizations that use Python include Wikipedia, Google,[141]\nYahoo!,[142] CERN,[143] NASA,[144] Facebook,[145] Amazon, Instagram,[146]\nSpotify[147] and some smaller entities like ILM[148] and ITA.[149] The social\nnews networking site Reddit is written entirely in Python.[150]\n\nPython can serve as a scripting language for web applications, e.g., via\nmod_wsgi for the Apache web server.[151] With Web Server Gateway Interface, a\nstandard API has evolved to facilitate these applications. Web frameworks like\nDjango, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle and Zope\nsupport developers in the design and maintenance of complex applications. Pyjs\nand IronPython can be used to develop the client-side of Ajax-based\napplications. SQLAlchemy can be used as data mapper to a relational database.\nTwisted is a framework to program communications between computers, and is\nused (for example) by Dropbox.\n\nLibraries such as NumPy, SciPy and Matplotlib allow the effective use of\nPython in scientific computing,[152][153] with specialized libraries such as\nBiopython and Astropy providing domain-specific functionality. SageMath is a\nmathematical software with a notebook interface programmable in Python: its\nlibrary covers many aspects of mathematics, including algebra, combinatorics,\nnumerical mathematics, number theory, and calculus.\n\nPython has been successfully embedded in many software products as a scripting\nlanguage, including in finite element method software such as Abaqus, 3D\nparametric modeler like FreeCAD, 3D animation packages such as 3ds Max,\nBlender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage,\nthe visual effects compositor Nuke, 2D imaging programs like GIMP,[154]\nInkscape, Scribus and Paint Shop Pro,[155] and musical notation programs like\nscorewriter and capella. GNU Debugger uses Python as a pretty printer to show\ncomplex structures such as C++ containers. Esri promotes Python as the best\nchoice for writing scripts in ArcGIS.[156] It has also been used in several\nvideo games,[157][158] and has been adopted as first of the three available\nprogramming languages in Google App Engine, the other two being Java and\nGo.[159]\n\nPython is commonly used in artificial intelligence projects with the help of\nlibraries like TensorFlow, Keras and Scikit-learn.[160][161][162][163] As a\nscripting language with modular architecture, simple syntax and rich text\nprocessing tools, Python is often used for natural language processing.[164]\n\nMany operating systems include Python as a standard component. It ships with\nmost Linux distributions[ _citation needed_ ], AmigaOS 4, FreeBSD (as a\npackage), NetBSD, OpenBSD (as a package) and macOS and can be used from the\ncommand line (terminal). Many Linux distributions use installers written in\nPython: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora use\nthe Anaconda installer. Gentoo Linux uses Python in its package management\nsystem, Portage.\n\nPython is used extensively in the information security industry, including in\nexploit development.[165][166]\n\nMost of the Sugar software for the One Laptop per Child XO, now developed at\nSugar Labs, is written in Python.[167] The Raspberry Pi single-board computer\nproject has adopted Python as its main user-programming language.\n\nLibreOffice includes Python, and intends to replace Java with Python. Its\nPython Scripting Provider is a core feature[168] since Version 4.0 from 7\nFebruary 2013.\n\n## Languages influenced by Python[edit]\n\nPython's design and philosophy have influenced many other programming\nlanguages:\n\n  * Boo uses indentation, a similar syntax, and a similar object model.[169]\n  * Cobra uses indentation and a similar syntax, and its \"Acknowledgements\" document lists Python first among languages that influenced it.[170] However, Cobra directly supports design-by-contract, unit tests, and optional static typing.[171]\n  * CoffeeScript, a programming language that cross-compiles to JavaScript, has Python-inspired syntax.\n  * ECMAScript borrowed iterators and generators from Python.[172]\n  * Go is designed for the \"speed of working in a dynamic language like Python\"[173] and shares the same syntax for slicing arrays.\n  * Groovy was motivated by the desire to bring the Python design philosophy to Java.[174]\n  * Julia was designed \"with true macros [.. and to be] as usable for general programming as Python [and] should be as fast as C\".[23] Calling to or from Julia is possible; to with PyCall.jl and a Python package pyjulia allows calling, in the other direction, from Python.\n  * Kotlin is a functional programming language with an interactive shell similar to Python. However, Kotlin is strongly typed with access to standard Java libraries.[175]\n  * Ruby's creator, Yukihiro Matsumoto, has said: \"I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language.\"[176]\n  * Swift, a programming language developed by Apple, has some Python-inspired syntax.[177]\n  * GDScript, dynamically typed programming language used to create video-games. It is extremely similar to Python with a few minor differences.\n\nPython's development practices have also been emulated by other languages. For\nexample, the practice of requiring a document describing the rationale for,\nand issues surrounding, a change to the language (in Python, a PEP) is also\nused in Tcl[178] and Erlang.[179]\n\nPython received TIOBE's Programming Language of the Year awards in 2007, 2010\nand 2018. The award is given to the language with the greatest growth in\npopularity over the year, as measured by the TIOBE index.[180]\n\n## See also[edit]\n\n  * ![icon](//upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Octicons-terminal.svg/24px-Octicons-terminal.svg.png)Computer programming portal\n  * ![](//upload.wikimedia.org/wikipedia/commons/thumb/3/31/Free_and_open-source_software_logo_%282009%29.svg/28px-Free_and_open-source_software_logo_%282009%29.svg.png)Free and open-source software portal\n\n  * Python syntax and semantics\n  * pip (package manager)\n  * IPython\n\n## References[edit]\n\n  1. ^ _**a**_ _**b**_ Guttag, John V. (12 August 2016). _Introduction to Computation and Programming Using Python: With Application to Understanding Data_. MIT Press. ISBN 978-0-262-52962-4.\n  2. **^** \"Python 3.8.1\".\n  3. **^** Peterson, Benjamin (19 October 2019). \"Python 2.7.17 released\". _Python Insider_. The Python Core Developers. Retrieved 22 October 2019.\n  4. **^** \"PEP 483 -- The Theory of Type Hints\". _Python.org_.\n  5. **^** File extension .pyo was removed in Python 3.5. See PEP 0488\n  6. **^** Holth, Moore (30 March 2014). \"PEP 0441 -- Improving Python ZIP Application Support\". Retrieved 12 November 2015.\n  7. **^** \"Starlark Language\". Retrieved 25 May 2019.\n  8. ^ _**a**_ _**b**_ \"Why was Python created in the first place?\". _General Python FAQ_. Python Software Foundation. Retrieved 22 March 2007.\n  9. **^** Kuchling, Andrew M. (22 December 2006). \"Interview with Guido van Rossum (July 1998)\". _amk.ca_. Archived from the original on 1 May 2007. Retrieved 12 March 2012.\n  10. ^ _**a**_ _**b**_ \"itertools \u2014 Functions creating iterators for efficient looping \u2014 Python 3.7.1 documentation\". _docs.python.org_.\n  11. **^** van Rossum, Guido (1993). \"An Introduction to Python for UNIX/C Programmers\". _Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group)_. CiteSeerX 10.1.1.38.2023. \"even though the design of C is far from ideal, its influence on Python is considerable.\"\n  12. ^ _**a**_ _**b**_ \"Classes\". _The Python Tutorial_. Python Software Foundation. Retrieved 20 February 2012. \"It is a mixture of the class mechanisms found in C++ and Modula-3\"\n  13. **^** Lundh, Fredrik. \"Call By Object\". _effbot.org_. Retrieved 21 November 2017. \"replace \"CLU\" with \"Python\", \"record\" with \"instance\", and \"procedure\" with \"function or method\", and you get a pretty accurate description of Python's object model.\"\n  14. **^** Simionato, Michele. \"The Python 2.3 Method Resolution Order\". Python Software Foundation. \"The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers\"\n  15. **^** Kuchling, A. M. \"Functional Programming HOWTO\". _Python v2.7.2 documentation_. Python Software Foundation. Retrieved 9 February 2012.\n  16. **^** Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). \"PEP 255 \u2013 Simple Generators\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 9 February 2012.\n  17. **^** Smith, Kevin D.; Jewett, Jim J.; Montanaro, Skip; Baxter, Anthony (2 September 2004). \"PEP 318 \u2013 Decorators for Functions and Methods\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 24 February 2012.\n  18. **^** \"More Control Flow Tools\". _Python 3 documentation_. Python Software Foundation. Retrieved 24 July 2015.\n  19. **^** \"CoffeeScript borrows chained comparisons from Python\".\n  20. **^** \"Genie Language - A brief guide\". Retrieved 28 December 2015.\n  21. **^** \"Perl and Python influences in JavaScript\". _www.2ality.com_. 24 February 2013. Retrieved 15 May 2015.\n  22. **^** Rauschmayer, Axel. \"Chapter 3: The Nature of JavaScript; Influences\". _O'Reilly, Speaking JavaScript_. Retrieved 15 May 2015.\n  23. ^ _**a**_ _**b**_ \"Why We Created Julia\". _Julia website_. February 2012. Retrieved 5 June 2014.\n  24. **^** Ring Team (4 December 2017). \"Ring and other languages\". _ring-lang.net_. ring-lang.\n  25. **^** Bini, Ola (2007). _Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform_. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8.\n  26. **^** Lattner, Chris (3 June 2014). \"Chris Lattner's Homepage\". Chris Lattner. Retrieved 3 June 2014. \"The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.\"\n  27. **^** Kuhlman, Dave. \"A Python Book: Beginning Python, Advanced Python, and Python Exercises\". Section 1.1. Archived from the original (PDF) on 23 June 2012.\n  28. **^** \"About Python\". Python Software Foundation. Retrieved 24 April 2012., second section \"Fans of Python use the phrase \"batteries included\" to describe the standard library, which covers everything from asynchronous processing to zip files.\"\n  29. **^** \"Sunsetting Python 2\". _Python.org_. Retrieved 22 September 2019.\n  30. **^** \"PEP 373 -- Python 2.7 Release Schedule\". _Python.org_. Retrieved 22 September 2019.\n  31. **^** \"Python Developer's Guide \u2014 Python Developer's Guide\". _devguide.python.org_. Retrieved 17 December 2019.\n  32. **^** \"History and License\". Retrieved 5 December 2016. \"All Python releases are Open Source\"\n  33. ^ _**a**_ _**b**_ Venners, Bill (13 January 2003). \"The Making of Python\". _Artima Developer_. Artima. Retrieved 22 March 2007.\n  34. **^** van Rossum, Guido (29 August 2000). \"SETL (was: Lukewarm about range literals)\". _Python-Dev_ (Mailing list). Retrieved 13 March 2011.\n  35. **^** van Rossum, Guido (20 January 2009). \"A Brief Timeline of Python\". _The History of Python_. Retrieved 20 January 2009.\n  36. **^** Fairchild, Carlie (12 July 2018). \"Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life\". _Linux Journal_. Retrieved 13 July 2018.\n  37. **^** \"Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life | Linux Journal\". _www.linuxjournal.com_.\n  38. **^** \"Python boss Guido van Rossum steps down after 30 years\". _The Inquirer_.\n  39. **^** \"PEP 8100\". _python_. Python Software Foundation. Retrieved 4 May 2019.\n  40. **^** \"PEP 8100\". Python Software Foundation. Retrieved 4 May 2019.\n  41. **^** Kuchling, A. M.; Zadka, Moshe (16 October 2000). \"What's New in Python 2.0\". Python Software Foundation. Retrieved 11 February 2012.\n  42. **^** \"Python 3.0 Release\". Python Software Foundation. Retrieved 8 July 2009.\n  43. **^** van Rossum, Guido (5 April 2006). \"PEP 3000 \u2013 Python 3000\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 27 June 2009.\n  44. **^** \"Automated Python 2 to 3 code translation \u2014 Python Documentation\". Retrieved 11 February 2018.\n  45. **^** \"PEP 373 -- Python 2.7 Release Schedule\". _python.org_. Retrieved 9 January 2017.\n  46. **^** \"PEP 466 -- Network Security Enhancements for Python 2.7.x\". _python.org_. Retrieved 9 January 2017.\n  47. **^** The Cain Gang Ltd. \"Python Metaclasses: Who? Why? When?\" (PDF). Archived from the original (PDF) on 30 May 2009. Retrieved 27 June 2009.\n  48. **^** \"3.3. Special method names\". _The Python Language Reference_. Python Software Foundation. Retrieved 27 June 2009.\n  49. **^** \"PyDBC: method preconditions, method postconditions and class invariants for Python\". Retrieved 24 September 2011.\n  50. **^** \"Contracts for Python\". Retrieved 24 September 2011.\n  51. **^** \"PyDatalog\". Retrieved 22 July 2012.\n  52. ^ _**a**_ _**b**_ Hettinger, Raymond (30 January 2002). \"PEP 289 \u2013 Generator Expressions\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 19 February 2012.\n  53. **^** \"6.5 itertools \u2013 Functions creating iterators for efficient looping\". Docs.python.org. Retrieved 22 November 2016.\n  54. ^ _**a**_ _**b**_ Peters, Tim (19 August 2004). \"PEP 20 \u2013 The Zen of Python\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 24 November 2008.\n  55. **^** Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). _Python Cookbook, 2nd Edition_. O'Reilly Media. p. 230. ISBN 978-0-596-00797-3.\n  56. **^** \"Python Culture\".\n  57. **^** \"General Python FAQ\". _Python v2.7.3 documentation_. Docs.python.org. Retrieved 3 December 2012.\n  58. **^** \"15 Ways Python Is a Powerful Force on the Web\".\n  59. **^** \"pprint - Data pretty printer - Python Documentation\".\n  60. **^** Goodger, David. \"Code Like a Pythonista: Idiomatic Python\".\n  61. **^** \"How to think like a Pythonista\".\n  62. **^** \"Is Python a good language for beginning programmers?\". _General Python FAQ_. Python Software Foundation. Retrieved 21 March 2007.\n  63. **^** \"Myths about indentation in Python\". Secnetix.de. Retrieved 19 April 2011.\n  64. **^** \"Python 2.5 Release\". _Python.org_.\n  65. **^** \"Highlights: Python 2.5\". _Python.org_.\n  66. **^** Sweigart, Al (2010). \"Appendix A: Differences Between Python 2 and 3\". _Invent Your Own Computer Games with Python_ (2 ed.). ISBN 978-0-9821060-1-3. Retrieved 20 February 2014.\n  67. **^** van Rossum, Guido (22 April 2009). \"Tail Recursion Elimination\". Neopythonic.blogspot.be. Retrieved 3 December 2012.\n  68. **^** van Rossum, Guido (9 February 2006). \"Language Design Is Not Just Solving Puzzles\". _Artima forums_. Artima. Retrieved 21 March 2007.\n  69. **^** van Rossum, Guido; Eby, Phillip J. (10 May 2005). \"PEP 342 \u2013 Coroutines via Enhanced Generators\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 19 February 2012.\n  70. **^** \"PEP 380\". Python.org. Retrieved 3 December 2012.\n  71. **^** \"division\". _python.org_.\n  72. **^** \"PEP 0465 -- A dedicated infix operator for matrix multiplication\". _python.org_. Retrieved 1 January 2016.\n  73. **^** \"Python 3.5.1 Release and Changelog\". _python.org_. Retrieved 1 January 2016.\n  74. **^** \"What's New In Python 3.8\". Retrieved 14 October 2019.\n  75. **^** \"Chapter 15. Expressions - 15.21.1. Numerical Equality Operators == and !=\". Oracle Corporation. Retrieved 28 August 2016.\n  76. **^** \"Chapter 15. Expressions - 15.21.3. Reference Equality Operators == and !=\". Oracle Corporation. Retrieved 28 August 2016.\n  77. **^** van Rossum, Guido; Hettinger, Raymond (7 February 2003). \"PEP 308 \u2013 Conditional Expressions\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 13 July 2011.\n  78. **^** \"4. Built-in Types \u2014 Python 3.6.3rc1 documentation\". _python.org_. Retrieved 1 October 2017.\n  79. **^** \"5.3. Tuples and Sequences \u2014 Python 3.7.1rc2 documentation\". _python.org_. Retrieved 17 October 2018.\n  80. ^ _**a**_ _**b**_ \"PEP 498 -- Literal String Interpolation\". _python.org_. Retrieved 8 March 2017.\n  81. **^** \"Why must 'self' be used explicitly in method definitions and calls?\". _Design and History FAQ_. Python Software Foundation. Retrieved 19 February 2012.\n  82. **^** \"The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1\". Retrieved 12 January 2011.\n  83. **^** \"Type hinting for Python\". LWN.net. 24 December 2014. Retrieved 5 May 2015.\n  84. **^** \"mypy - Optional Static Typing for Python\". Retrieved 28 January 2017.\n  85. **^** Zadka, Moshe; van Rossum, Guido (11 March 2001). \"PEP 237 \u2013 Unifying Long Integers and Integers\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 24 September 2011.\n  86. **^** \"Built-in Types\". Retrieved 3 October 2019.\n  87. **^** \"PEP 465 -- A dedicated infix operator for matrix multiplication\". _python.org_.\n  88. **^** \"The tilde operator in Python - Stackoverflow\". _stackoverflow.com_.\n  89. **^** \"BitwiseOperators - Python Wiki\". _wiki.python.org_.\n  90. ^ _**a**_ _**b**_ Zadka, Moshe; van Rossum, Guido (11 March 2001). \"PEP 238 \u2013 Changing the Division Operator\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 23 October 2013.\n  91. **^** \"Why Python's Integer Division Floors\". Retrieved 25 August 2010.\n  92. **^** \"round\", _The Python standard library, release 2.7, \u00a72: Built-in functions_ , retrieved 14 August 2011\n  93. **^** \"round\", _The Python standard library, release 3.2, \u00a72: Built-in functions_ , retrieved 14 August 2011\n  94. **^** Beazley, David M. (2009). _Python Essential Reference_ (4th ed.). p. 66.\n  95. **^** Kernighan, Brian W.; Ritchie, Dennis M. (1988). _The C Programming Language_ (2nd ed.). p. 206.\n  96. **^** \"Built-in Type\". _docs.python.org_.\n  97. **^** Batista, Facundo. \"PEP 0327 -- Decimal Data Type\". _Python.org_. Retrieved 26 September 2015.\n  98. **^** \"What's New in Python 2.6 \u2014 Python v2.6.9 documentation\". _docs.python.org_. Retrieved 26 September 2015.\n  99. **^** \"10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) \u2014 Hoyt Koepke\". _www.stat.washington.edu_. Retrieved 3 February 2019.\n  100. **^** Shell, Scott (17 June 2014). \"An introduction to Python for scientific computing\" (PDF). Retrieved 3 February 2019.\n  101. **^** Piotrowski, Przemyslaw (July 2006). \"Build a Rapid Web Development Environment for Python Server Pages and Oracle\". _Oracle Technology Network_. Oracle. Retrieved 12 March 2012.\n  102. **^** Batista, Facundo (17 October 2003). \"PEP 327 \u2013 Decimal Data Type\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 24 November 2008.\n  103. **^** Eby, Phillip J. (7 December 2003). \"PEP 333 \u2013 Python Web Server Gateway Interface v1.0\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 19 February 2012.\n  104. **^** Debill, Erik. \"Module Counts\". _ModuleCounts_. Retrieved 5 November 2019.\n  105. **^** \"20+ Python Web Scraping Examples (Beautiful Soup & Selenium) - Like Geeks\". _likegeeks.com_. 5 December 2017. Retrieved 12 March 2018.\n  106. **^** Enthought, Canopy. \"Canopy\". _www.enthought.com_. Retrieved 20 August 2016.\n  107. **^** van Rossum, Guido (5 June 2001). \"PEP 7 \u2013 Style Guide for C Code\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 24 November 2008.\n  108. **^** \"CPython byte code\". Docs.python.org. Retrieved 16 February 2016.\n  109. **^** \"Python 2.5 internals\" (PDF). Retrieved 19 April 2011.\n  110. **^** \"An Interview with Guido van Rossum\". Oreilly.com. Retrieved 24 November 2008.\n  111. **^** \"PyPy compatibility\". Pypy.org. Retrieved 3 December 2012.\n  112. **^** \"speed comparison between CPython and Pypy\". Speed.pypy.org. Retrieved 3 December 2012.\n  113. **^** Shaw, Anthony (30 March 2018). \"Which is the fastest version of Python?\". Hacker Noon. Retrieved 20 December 2019.\n  114. **^** \"Application-level Stackless features \u2014 PyPy 2.0.2 documentation\". Doc.pypy.org. Retrieved 17 July 2013.\n  115. **^** \"Python-for-EV3\". _LEGO Education_. Retrieved 17 April 2019.\n  116. **^** _GitHub - RustPython/RustPython: A Python Interpreter written in Rust._, RustPython, 13 September 2019, retrieved 13 September 2019\n  117. **^** \"Plans for optimizing Python\". _Google Project Hosting_. 15 December 2009. Retrieved 24 September 2011.\n  118. **^** \"Python on the Nokia N900\". _Stochastic Geometry_. 29 April 2010.\n  119. **^** \"Nuitka Home | Nuitka Home\". _nuitka.net_. Retrieved 18 August 2017.\n  120. **^** Murri, Riccardo (2013). _Performance of Python runtimes on a non-numeric scientific code_. European Conference on Python in Science (EuroSciPy). arXiv:1404.6388. Bibcode:2014arXiv1404.6388M.\n  121. ^ _**a**_ _**b**_ Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). \"PEP 1 \u2013 PEP Purpose and Guidelines\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 19 April 2011.\n  122. **^** \"PEP 8 -- Style Guide for Python Code\". _Python.org_.\n  123. **^** Cannon, Brett. \"Guido, Some Guys, and a Mailing List: How Python is Developed\". _python.org_. Python Software Foundation. Archived from the original on 1 June 2009. Retrieved 27 June 2009.\n  124. **^** \"Python Developer's Guide\".\n  125. **^** Norwitz, Neal (8 April 2002). \"[Python-Dev] Release Schedules (was Stability & change)\". Retrieved 27 June 2009.\n  126. **^** Aahz; Baxter, Anthony (15 March 2001). \"PEP 6 \u2013 Bug Fix Releases\". _Python Enhancement Proposals_. Python Software Foundation. Retrieved 27 June 2009.\n  127. **^** \"What's New In Python 3.9\". _Python_. Retrieved 28 November 2019.\n  128. **^** \"PEP 605 -- A rolling feature release stream for CPython\". _Python.org_. Retrieved 6 November 2019.\n  129. **^** \"PEP 602 -- Annual Release Cycle for Python\". _Python.org_. Retrieved 6 November 2019.\n  130. **^** \"PEP 596 -- Python 3.9 Release Schedule\". _Python.org_. Retrieved 6 November 2019.\n  131. **^** \"Changing the Python release cadence [LWN.net]\". _lwn.net_. Retrieved 6 November 2019.\n  132. **^** \"Python Buildbot\". _Python Developer\u2019s Guide_. Python Software Foundation. Retrieved 24 September 2011.\n  133. **^** DeBill, Erik. \"Module Counts\". _www.modulecounts.com_. Retrieved 29 November 2019.\n  134. ^ _**a**_ _**b**_ \"Whetting Your Appetite\". _The Python Tutorial_. Python Software Foundation. Retrieved 20 February 2012.\n  135. **^** \"In Python, should I use else after a return in an if block?\". _Stack Overflow_. Stack Exchange. 17 February 2011. Retrieved 6 May 2011.\n  136. **^** Lutz, Mark (2009). _Learning Python: Powerful Object-Oriented Programming_. O'Reilly Media, Inc. p. 17. ISBN 9781449379322.\n  137. **^** Fehily, Chris (2002). _Python_. Peachpit Press. p. xv. ISBN 9780201748840.\n  138. **^** \"TIOBE Index\". TIOBE - The Software Quality Company. Retrieved 7 March 2017.\n  139. **^** TIOBE Software Index (2015). \"TIOBE Programming Community Index Python\". Retrieved 10 September 2015.\n  140. **^** Prechelt, Lutz (14 March 2000). \"An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl\" (PDF). Retrieved 30 August 2013.\n  141. **^** \"Quotes about Python\". Python Software Foundation. Retrieved 8 January 2012.\n  142. **^** \"Organizations Using Python\". Python Software Foundation. Retrieved 15 January 2009.\n  143. **^** \"Python : the holy grail of programming\". _CERN Bulletin_. CERN Publications (31/2006). 31 July 2006. Retrieved 11 February 2012.\n  144. **^** Shafer, Daniel G. (17 January 2003). \"Python Streamlines Space Shuttle Mission Design\". Python Software Foundation. Retrieved 24 November 2008.\n  145. **^** \"Tornado: Facebook's Real-Time Web Framework for Python - Facebook for Developers\". _Facebook for Developers_. Retrieved 19 June 2018.\n  146. **^** \"What Powers Instagram: Hundreds of Instances, Dozens of Technologies\". Instagram Engineering. Retrieved 27 May 2019.\n  147. **^** \"How we use Python at Spotify\". _Spotify Labs_. 20 March 2013. Retrieved 25 July 2018.\n  148. **^** Fortenberry, Tim (17 January 2003). \"Industrial Light & Magic Runs on Python\". Python Software Foundation. Retrieved 11 February 2012.\n  149. **^** Taft, Darryl K. (5 March 2007). \"Python Slithers into Systems\". _eWeek.com_. Ziff Davis Holdings. Retrieved 24 September 2011.\n  150. **^** _GitHub - reddit-archive/reddit: historical code from reddit.com._, The Reddit Archives, 19 March 2019, retrieved 20 March 2019\n  151. **^** \"Usage statistics and market share of Python for websites\". 2012. Retrieved 18 December 2012.\n  152. **^** Oliphant, Travis (2007). \"Python for Scientific Computing\". _Computing in Science and Engineering_. **9** (3): 10\u201320. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58.\n  153. **^** Millman, K. Jarrod; Aivazis, Michael (2011). \"Python for Scientists and Engineers\". _Computing in Science and Engineering_. **13** (2): 9\u201312. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36.\n  154. **^** \"Installers for GIMP for Windows - Frequently Asked Questions\". 26 July 2013. Archived from the original on 17 July 2013. Retrieved 26 July 2013.\n  155. **^** \"jasc psp9components\". Archived from the original on 19 March 2008.\n  156. **^** \"About getting started with writing geoprocessing scripts\". _ArcGIS Desktop Help 9.2_. Environmental Systems Research Institute. 17 November 2006. Retrieved 11 February 2012.\n  157. **^** CCP porkbelly (24 August 2010). \"Stackless Python 2.7\". _EVE Community Dev Blogs_. CCP Games. \"As you may know, EVE has at its core the programming language known as Stackless Python.\"\n  158. **^** Caudill, Barry (20 September 2005). \"Modding Sid Meier's Civilization IV\". _Sid Meier's Civilization IV Developer Blog_. Firaxis Games. Archived from the original on 2 December 2010. \"we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it.\"\n  159. **^** \"Python Language Guide (v1.0)\". _Google Documents List Data API v1.0_. Archived from the original on 15 July 2010.\n  160. **^** Dean, Jeff; Monga, Rajat; et al. (9 November 2015). \"TensorFlow: Large-scale machine learning on heterogeneous systems\" (PDF). _TensorFlow.org_. Google Research. Retrieved 10 November 2015.\n  161. **^** Piatetsky, Gregory. \"Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis\". _KDnuggets_. KDnuggets. Retrieved 30 May 2018.\n  162. **^** \"Who is using scikit-learn? \u2014 scikit-learn 0.20.1 documentation\". _scikit-learn.org_.\n  163. **^** Jouppi, Norm. \"Google supercharges machine learning tasks with TPU custom chip\". _Google Cloud Platform Blog_. Retrieved 19 May 2016.\n  164. **^** \"Natural Language Toolkit\".\n  165. **^** \"Immunity: Knowing You're Secure\". Archived from the original on 16 February 2009.\n  166. **^** \"Corelabs site\".\n  167. **^** \"What is Sugar?\". Sugar Labs. Retrieved 11 February 2012.\n  168. **^** \"4.0 New Features and Fixes\". _LibreOffice.org_. The Document Foundation. 2013. Retrieved 25 February 2013.\n  169. **^** \"Gotchas for Python Users\". _boo.codehaus.org_. Codehaus Foundation. Archived from the original on 11 December 2008. Retrieved 24 November 2008.\n  170. **^** Esterbrook, Charles. \"Acknowledgements\". _cobra-language.com_. Cobra Language. Retrieved 7 April 2010.\n  171. **^** Esterbrook, Charles. \"Comparison to Python\". _cobra-language.com_. Cobra Language. Retrieved 7 April 2010.\n  172. **^** \"Proposals: iterators and generators [ES4 Wiki]\". wiki.ecmascript.org. Archived from the original on 20 October 2007. Retrieved 24 November 2008.\n  173. **^** Kincaid, Jason (10 November 2009). \"Google's Go: A New Programming Language That's Python Meets C++\". _TechCrunch_. Retrieved 29 January 2010.\n  174. **^** Strachan, James (29 August 2003). \"Groovy \u2013 the birth of a new dynamic language for the Java platform\".\n  175. **^** \"Working with the Command Line Compiler - Kotlin Programming Language\". _Kotlin_. Retrieved 12 March 2018.\n  176. **^** \"An Interview with the Creator of Ruby\". Linuxdevcenter.com. Retrieved 3 December 2012.\n  177. **^** Lattner, Chris (3 June 2014). \"Chris Lattner's Homepage\". Chris Lattner. Retrieved 3 June 2014. \"I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.\"\n  178. **^** Kupries, Andreas; Fellows, Donal K. (14 September 2000). \"TIP #3: TIP Format\". _tcl.tk_. Tcl Developer Xchange. Retrieved 24 November 2008.\n  179. **^** Gustafsson, Per; Niskanen, Raimo (29 January 2007). \"EEP 1: EEP Purpose and Guidelines\". erlang.org. Retrieved 19 April 2011.\n  180. **^** \"TIOBE Programming Community Index for March 2012\". TIOBE Software. March 2012. Retrieved 25 March 2012.\n\n### Sources[edit]\n\n  * \"Python for Artificial Intelligence\". Wiki.python.org. 19 July 2012. Archived from the original on 1 November 2012. Retrieved 3 December 2012.\n  * Paine, Jocelyn, ed. (August 2005). \"AI in Python\". _AI Expert Newsletter_. Amzi!. Retrieved 11 February 2012.\n  * \"PyAIML 0.8.5 : Python Package Index\". Pypi.python.org. Retrieved 17 July 2013.\n  * Russell, Stuart J. & Norvig, Peter (2009). _Artificial Intelligence: A Modern Approach_ (3rd ed.). Upper Saddle River, NJ: Prentice Hall. ISBN 978-0-13-604259-4.\n\n## Further reading[edit]\n\n  * Downey, Allen B. (May 2012). _Think Python: How to Think Like a Computer Scientist_ (Version 1.6.6 ed.). ISBN 978-0-521-72596-5.\n  * Hamilton, Naomi (5 August 2008). \"The A-Z of Programming Languages: Python\". _Computerworld_. Archived from the original on 29 December 2008. Retrieved 31 March 2010.\n  * Lutz, Mark (2013). _Learning Python_ (5th ed.). O'Reilly Media. ISBN 978-0-596-15806-4.\n  * Pilgrim, Mark (2004). _Dive Into Python_. Apress. ISBN 978-1-59059-356-1.\n  * Pilgrim, Mark (2009). _Dive Into Python 3_. Apress. ISBN 978-1-4302-2415-0.\n  * Summerfield, Mark (2009). _Programming in Python 3_ (2nd ed.). Addison-Wesley Professional. ISBN 978-0-321-68056-3.\n\n## External links[edit]\n\n**Python (programming language)** at Wikipedia's sister projects\n\n  * ![](//upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/20px-Commons-logo.svg.png)Media from Wikimedia Commons\n  * ![](//upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Wikiquote-logo.svg/23px-Wikiquote-logo.svg.png)Quotations from Wikiquote\n  * ![](//upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Wikibooks-logo.svg/27px-Wikibooks-logo.svg.png)Textbooks from Wikibooks\n  * ![](//upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Wikiversity-logo-en.svg/27px-Wikiversity-logo-en.svg.png)Resources from Wikiversity\n\n  * Official website ![Edit this at Wikidata](//upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png)\n  * Python (programming language) at Curlie\n\n  * v\n  * t\n  * e\n\nProgramming languages  \n  \n---  \n  \n  * Comparison\n  * Timeline\n  * History\n\n  \n  \n  * APL\n  * Assembly\n  * BASIC\n  * C\n  * C++\n  * C#\n  * COBOL\n  * Elixir\n  * Fortran\n  * Go\n  * Groovy\n  * Haskell\n  * Java\n  * JavaScript (JS)\n  * Julia\n  * Kotlin\n  * Lisp\n  * Lua\n  * MATLAB\n  * Objective-C\n  * OCaml\n  * Pascal\n  * Perl\n  * PHP\n  * Python\n  * R\n  * Ruby\n  * Rust\n  * Scala\n  * Shell\n  * Smalltalk\n  * Swift\n  * TypeScript\n  * Visual Basic .NET (VB.NET)\n  * _more..._\n\n  \n  \n  * ![Category](//upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/16px-Folder_Hexagonal_Icon.svg.png) **Category**\n  * ![List-Class article](//upload.wikimedia.org/wikipedia/en/thumb/d/db/Symbol_list_class.svg/16px-Symbol_list_class.svg.png) **Lists**\n    * Alphabetical\n    * Categorical\n    * Generational\n    * Non-English-based\n\n  \n  \n  * v\n  * t\n  * e\n\nPython  \n  \n---  \nImplementations|\n\n  * CircuitPython\n  * CLPython\n  * CPython\n  * Cython\n  * MicroPython\n  * Numba\n  * IronPython\n  * Jython\n  * Psyco\n  * PyPy\n  * Python for S60\n  * Shed Skin\n  * Stackless Python\n  * Unladen Swallow\n  * _more..._\n\n|\n\n![Python-logo-\nnotext.svg](//upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-\nnotext.svg/55px-Python-logo-notext.svg.png)  \n  \nIDE|\n\n  * Boa\n  * Eric Python IDE\n  * IDLE\n  * PyCharm\n  * PyDev\n  * SPE\n  * Ninja-IDE\n  * _more..._\n\n  \n  \nTopics|\n\n  * WSGI\n\n  \n  \n  * software (list)\n  * Python Software Foundation\n  * PyCon\n\n  \n  \n  * v\n  * t\n  * e\n\nPython web frameworks  \n  \n---  \n  \n  * BlueBream\n  * Bottle\n  * CherryPy\n  * Django\n  * Flask\n  * Grok\n  * Nagare\n  * Nevow\n  * Pyjs\n  * Pylons\n  * Pyramid\n  * Quixote\n  * Spyce\n  * TACTIC\n  * Tornado\n  * TurboGears\n  * TwistedWeb\n  * Webware\n  * web2py\n  * Zope 2\n  * _more_...\n\n  \n  \n  * v\n  * t\n  * e\n\nFree and open-source software  \n  \n---  \nGeneral|\n\n  * Alternative terms for free software\n  * Comparison of open-source and closed-source software\n  * Comparison of source-code-hosting facilities\n  * Free software\n  * Free software project directories\n  * Gratis versus libre\n  * Long-term support\n  * Open-source software\n  * Open-source software development\n  * Outline\n\n  \n  \nSoftware  \npackages|\n\n  * Audio\n  * Bioinformatics\n  * Codecs\n  * Collaboration\n  * Configuration management\n  * Device drivers\n    * Graphics\n    * Wireless\n  * Geophysics\n  * Health\n  * Mathematics\n  * Operating systems\n  * Programming languages\n  * Routing\n  * Statistics\n  * Television\n  * Video games\n  * Web applications\n    * Content management systems\n    * E-commerce\n  * Word processors\n  * Android apps\n  * iOS apps\n  * Commercial\n  * Trademarked\n  * Formerly proprietary\n  * Formerly open-source\n\n  \n  \nCommunity|\n\n  * Free software movement\n  * History\n  * Open-source-software movement\n  * Organizations\n  * Events\n\n  \n  \nLicenses|\n\n  * AFL\n  * Apache\n  * APSL\n  * Artistic\n  * Beerware\n  * Boost\n  * BSD\n  * CC0\n  * CDDL\n  * EPL\n  * Free Software Foundation\n    * GNU GPL\n    * GNU LGPL\n  * ISC\n  * MIT\n  * MPL\n  * Ms-PL/RL\n  * Python\n  * Python Software Foundation License\n  * Sleepycat\n  * Unlicense\n  * WTFPL\n  * zlib\n\n| Types and  \nstandards|\n\n  * Comparison of free and open-source software licenses\n  * Contributor License Agreement\n  * Copyleft\n  * Debian Free Software Guidelines\n  * Definition of Free Cultural Works\n  * Free license\n  * The Free Software Definition\n  * The Open Source Definition\n  * Open-source license\n  * Permissive software license\n  * Public domain\n  * Viral license\n\n  \n  \n---|---  \n  \nChallenges|\n\n  * Digital rights management\n  * Firmware security\n  * Hardware restrictions\n  * License proliferation\n  * Mozilla software rebranding\n  * Proprietary device drivers\n  * Proprietary firmware\n  * Proprietary software\n  * SCO/Linux controversies\n  * Secure boot\n  * Software patents\n  * Software security\n  * Trusted Computing\n\n  \n  \nRelated topics|\n\n  * Forking\n  * _GNU Manifesto_\n  * Microsoft Open Specification Promise\n  * Open-core model\n  * Open-source hardware\n  * Shared Source Initiative\n  * Source-available software\n  * _The Cathedral and the Bazaar_\n  * _Revolution OS_\n\n  \n  \n  * ![Free and open-source software logo \\(2009\\).svg](//upload.wikimedia.org/wikipedia/commons/thumb/3/31/Free_and_open-source_software_logo_%282009%29.svg/28px-Free_and_open-source_software_logo_%282009%29.svg.png) Free and open-source software portal\n  * ![Category](//upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/16px-Folder_Hexagonal_Icon.svg.png) Category\n  * ![Commons page](//upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/12px-Commons-logo.svg.png) Commons\n  * ![WikiProject](//upload.wikimedia.org/wikipedia/commons/thumb/3/37/People_icon.svg/16px-People_icon.svg.png) WikiProject\n  * ![Wikipedia book](//upload.wikimedia.org/wikipedia/commons/thumb/8/89/Symbol_book_class2.svg/16px-Symbol_book_class2.svg.png) Book\n\n  \n  \nAuthority control ![Edit this at\nWikidata](//upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-\nltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png)|\n\n  * BNF: cb13560465c (data)\n  * GND: 4434275-5\n  * LCCN: sh96008834\n  * SUDOC: 051626225\n\n  \n  \n---|---  \n  \n![](//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1)\n\nRetrieved from\n\"https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&oldid=932065732\"\n\nCategories:\n\n  * Programming languages\n  * Class-based programming languages\n  * Computational notebook\n  * Computer science in the Netherlands\n  * Cross-platform free software\n  * Dutch inventions\n  * Dynamically typed programming languages\n  * Educational programming languages\n  * High-level programming languages\n  * Information technology in the Netherlands\n  * Object-oriented programming languages\n  * Programming languages created in 1991\n  * Python (programming language)\n  * Scripting languages\n  * Text-oriented programming languages\n  * Cross-platform software\n\nHidden categories:\n\n  * Articles with short description\n  * Use dmy dates from August 2015\n  * Articles containing potentially dated statements from November 2019\n  * All articles containing potentially dated statements\n  * Articles containing potentially dated statements from December 2018\n  * All articles with unsourced statements\n  * Articles with unsourced statements from December 2019\n  * Articles with Curlie links\n  * Wikipedia articles with BNF identifiers\n  * Wikipedia articles with GND identifiers\n  * Wikipedia articles with LCCN identifiers\n  * Wikipedia articles with SUDOC identifiers\n  * Good articles\n  * Articles with example Python code\n\n## Navigation menu\n\n### Personal tools\n\n  * Not logged in\n  * Talk\n  * Contributions\n  * Create account\n  * Log in\n\n### Namespaces\n\n  * Article\n  * Talk\n\n###  Variants\n\n### Views\n\n  * Read\n  * Edit\n  * View history\n\n### More\n\n###  Search\n\n### Navigation\n\n  * Main page\n  * Contents\n  * Featured content\n  * Current events\n  * Random article\n  * Donate to Wikipedia\n  * Wikipedia store\n\n### Interaction\n\n  * Help\n  * About Wikipedia\n  * Community portal\n  * Recent changes\n  * Contact page\n\n### Tools\n\n  * What links here\n  * Related changes\n  * Upload file\n  * Special pages\n  * Permanent link\n  * Page information\n  * Wikidata item\n  * Cite this page\n\n### In other projects\n\n  * Wikimedia Commons\n  * Wikibooks\n  * Wikiquote\n  * Wikiversity\n\n### Print/export\n\n  * Create a book\n  * Download as PDF\n  * Printable version\n\n### Languages\n\n  * Afrikaans\n  * Alemannisch\n  * \u0627\u0644\u0639\u0631\u0628\u064a\u0629\n  * Aragon\u00e9s\n  * \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be\n  * Asturianu\n  * Az\u0259rbaycanca\n  * \u062a\u06c6\u0631\u06a9\u062c\u0647\n  * \u09ac\u09be\u0982\u09b2\u09be\n  * B\u00e2n-l\u00e2m-g\u00fa\n  * \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f\n  * \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\n  * Bosanski\n  * Catal\u00e0\n  * Cebuano\n  * \u010ce\u0161tina\n  * Cymraeg\n  * Dansk\n  * Deutsch\n  * Eesti\n  * \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\n  * Espa\u00f1ol\n  * Esperanto\n  * Euskara\n  * \u0641\u0627\u0631\u0633\u06cc\n  * Fran\u00e7ais\n  * Galego\n  * \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0\n  * \ud55c\uad6d\uc5b4\n  * \u0540\u0561\u0575\u0565\u0580\u0565\u0576\n  * \u0939\u093f\u0928\u094d\u0926\u0940\n  * Hrvatski\n  * Bahasa Indonesia\n  * Interlingua\n  * \u00cdslenska\n  * Italiano\n  * \u05e2\u05d1\u05e8\u05d9\u05ea\n  * \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8\n  * \u049a\u0430\u0437\u0430\u049b\u0448\u0430\n  * \u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430\n  * Latina\n  * Latvie\u0161u\n  * Lietuvi\u0173\n  * La .lojban.\n  * Lumbaart\n  * Magyar\n  * \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438\n  * \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02\n  * \u092e\u0930\u093e\u0920\u0940\n  * Bahasa Melayu\n  * \u041c\u043e\u043d\u0433\u043e\u043b\n  * \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c\n  * Na Vosa Vakaviti\n  * Nederlands\n  * \u0928\u0947\u092a\u093e\u0932\u0940\n  * \u65e5\u672c\u8a9e\n  * Norsk bokm\u00e5l\n  * Norsk nynorsk\n  * \u0b13\u0b21\u0b3c\u0b3f\u0b06\n  * O\u02bbzbekcha/\u045e\u0437\u0431\u0435\u043a\u0447\u0430\n  * \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\n  * \u067e\u0646\u062c\u0627\u0628\u06cc\n  * \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a\n  * Plattd\u00fc\u00fctsch\n  * Polski\n  * Portugu\u00eas\n  * Rom\u00e2n\u0103\n  * \u0420\u0443\u0441\u0441\u043a\u0438\u0439\n  * Scots\n  * Shqip\n  * \u0dc3\u0dd2\u0d82\u0dc4\u0dbd\n  * Simple English\n  * Sloven\u010dina\n  * Sloven\u0161\u010dina\n  * \u06a9\u0648\u0631\u062f\u06cc\n  * \u0421\u0440\u043f\u0441\u043a\u0438 / srpski\n  * Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438\n  * \u107d\u1083\u1087\u101e\u1083\u1087\u1010\u1086\u1038 \n  * Suomi\n  * Svenska\n  * Tagalog\n  * \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\n  * \u0422\u0430\u0442\u0430\u0440\u0447\u0430/tatar\u00e7a\n  * \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41\n  * \u0e44\u0e17\u0e22\n  * \u0422\u043e\u04b7\u0438\u043a\u04e3\n  * T\u00fcrk\u00e7e\n  * \u1a05\u1a14 \u1a15\u1a18\u1a01\u1a17\n  * \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\n  * \u0627\u0631\u062f\u0648\n  * Ti\u1ebfng Vi\u1ec7t\n  * Winaray\n  * \u5434\u8bed\n  * \u7cb5\u8a9e\n  * \u4e2d\u6587\n\nEdit links\n\n  * This page was last edited on 23 December 2019, at 05:23 (UTC).\n  * Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\n\n  * Privacy policy\n  * About Wikipedia\n  * Disclaimers\n  * Contact Wikipedia\n  * Developers\n  * Statistics\n  * Cookie statement\n  * Mobile view\n\n  * ![Wikimedia Foundation](/static/images/wikimedia-button.png)\n  * ![Powered by MediaWiki](/static/images/poweredby_mediawiki_88x31.png)\n\n  *[v]: View this template\n  *[t]: Discuss this template\n  *[e]: Edit this template\n\n"}
